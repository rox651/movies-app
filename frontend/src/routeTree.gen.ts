/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from "./routes/__root";
import { Route as IndexRouteImport } from "./routes/index";
import { Route as TypeIndexRouteImport } from "./routes/type/index";
import { Route as GenreIndexRouteImport } from "./routes/genre/index";
import { Route as FilmProductionIndexRouteImport } from "./routes/filmProduction/index";
import { Route as DirectorIndexRouteImport } from "./routes/director/index";
import { Route as TypeNewRouteImport } from "./routes/type/new";
import { Route as MediaNewRouteImport } from "./routes/media/new";
import { Route as GenreNewRouteImport } from "./routes/genre/new";
import { Route as FilmProductionNewRouteImport } from "./routes/filmProduction/new";
import { Route as DirectorNewRouteImport } from "./routes/director/new";
import { Route as TypeIdIndexRouteImport } from "./routes/type/$id/index";
import { Route as MediaIdIndexRouteImport } from "./routes/media/$id/index";
import { Route as GenreIdIndexRouteImport } from "./routes/genre/$id/index";
import { Route as FilmProductionIdIndexRouteImport } from "./routes/filmProduction/$id/index";
import { Route as DirectorIdIndexRouteImport } from "./routes/director/$id/index";
import { Route as TypeIdUpdateRouteImport } from "./routes/type/$id/update";
import { Route as MediaIdUpdateRouteImport } from "./routes/media/$id/update";
import { Route as GenreIdUpdateRouteImport } from "./routes/genre/$id/update";
import { Route as FilmProductionIdUpdateRouteImport } from "./routes/filmProduction/$id/update";
import { Route as DirectorIdUpdateRouteImport } from "./routes/director/$id/update";

const IndexRoute = IndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRouteImport,
} as any);
const TypeIndexRoute = TypeIndexRouteImport.update({
  id: "/type/",
  path: "/type/",
  getParentRoute: () => rootRouteImport,
} as any);
const GenreIndexRoute = GenreIndexRouteImport.update({
  id: "/genre/",
  path: "/genre/",
  getParentRoute: () => rootRouteImport,
} as any);
const FilmProductionIndexRoute = FilmProductionIndexRouteImport.update({
  id: "/filmProduction/",
  path: "/filmProduction/",
  getParentRoute: () => rootRouteImport,
} as any);
const DirectorIndexRoute = DirectorIndexRouteImport.update({
  id: "/director/",
  path: "/director/",
  getParentRoute: () => rootRouteImport,
} as any);
const TypeNewRoute = TypeNewRouteImport.update({
  id: "/type/new",
  path: "/type/new",
  getParentRoute: () => rootRouteImport,
} as any);
const MediaNewRoute = MediaNewRouteImport.update({
  id: "/media/new",
  path: "/media/new",
  getParentRoute: () => rootRouteImport,
} as any);
const GenreNewRoute = GenreNewRouteImport.update({
  id: "/genre/new",
  path: "/genre/new",
  getParentRoute: () => rootRouteImport,
} as any);
const FilmProductionNewRoute = FilmProductionNewRouteImport.update({
  id: "/filmProduction/new",
  path: "/filmProduction/new",
  getParentRoute: () => rootRouteImport,
} as any);
const DirectorNewRoute = DirectorNewRouteImport.update({
  id: "/director/new",
  path: "/director/new",
  getParentRoute: () => rootRouteImport,
} as any);
const TypeIdIndexRoute = TypeIdIndexRouteImport.update({
  id: "/type/$id/",
  path: "/type/$id/",
  getParentRoute: () => rootRouteImport,
} as any);
const MediaIdIndexRoute = MediaIdIndexRouteImport.update({
  id: "/media/$id/",
  path: "/media/$id/",
  getParentRoute: () => rootRouteImport,
} as any);
const GenreIdIndexRoute = GenreIdIndexRouteImport.update({
  id: "/genre/$id/",
  path: "/genre/$id/",
  getParentRoute: () => rootRouteImport,
} as any);
const FilmProductionIdIndexRoute = FilmProductionIdIndexRouteImport.update({
  id: "/filmProduction/$id/",
  path: "/filmProduction/$id/",
  getParentRoute: () => rootRouteImport,
} as any);
const DirectorIdIndexRoute = DirectorIdIndexRouteImport.update({
  id: "/director/$id/",
  path: "/director/$id/",
  getParentRoute: () => rootRouteImport,
} as any);
const TypeIdUpdateRoute = TypeIdUpdateRouteImport.update({
  id: "/type/$id/update",
  path: "/type/$id/update",
  getParentRoute: () => rootRouteImport,
} as any);
const MediaIdUpdateRoute = MediaIdUpdateRouteImport.update({
  id: "/media/$id/update",
  path: "/media/$id/update",
  getParentRoute: () => rootRouteImport,
} as any);
const GenreIdUpdateRoute = GenreIdUpdateRouteImport.update({
  id: "/genre/$id/update",
  path: "/genre/$id/update",
  getParentRoute: () => rootRouteImport,
} as any);
const FilmProductionIdUpdateRoute = FilmProductionIdUpdateRouteImport.update({
  id: "/filmProduction/$id/update",
  path: "/filmProduction/$id/update",
  getParentRoute: () => rootRouteImport,
} as any);
const DirectorIdUpdateRoute = DirectorIdUpdateRouteImport.update({
  id: "/director/$id/update",
  path: "/director/$id/update",
  getParentRoute: () => rootRouteImport,
} as any);

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute;
  "/director/new": typeof DirectorNewRoute;
  "/filmProduction/new": typeof FilmProductionNewRoute;
  "/genre/new": typeof GenreNewRoute;
  "/media/new": typeof MediaNewRoute;
  "/type/new": typeof TypeNewRoute;
  "/director": typeof DirectorIndexRoute;
  "/filmProduction": typeof FilmProductionIndexRoute;
  "/genre": typeof GenreIndexRoute;
  "/type": typeof TypeIndexRoute;
  "/director/$id/update": typeof DirectorIdUpdateRoute;
  "/filmProduction/$id/update": typeof FilmProductionIdUpdateRoute;
  "/genre/$id/update": typeof GenreIdUpdateRoute;
  "/media/$id/update": typeof MediaIdUpdateRoute;
  "/type/$id/update": typeof TypeIdUpdateRoute;
  "/director/$id": typeof DirectorIdIndexRoute;
  "/filmProduction/$id": typeof FilmProductionIdIndexRoute;
  "/genre/$id": typeof GenreIdIndexRoute;
  "/media/$id": typeof MediaIdIndexRoute;
  "/type/$id": typeof TypeIdIndexRoute;
}
export interface FileRoutesByTo {
  "/": typeof IndexRoute;
  "/director/new": typeof DirectorNewRoute;
  "/filmProduction/new": typeof FilmProductionNewRoute;
  "/genre/new": typeof GenreNewRoute;
  "/media/new": typeof MediaNewRoute;
  "/type/new": typeof TypeNewRoute;
  "/director": typeof DirectorIndexRoute;
  "/filmProduction": typeof FilmProductionIndexRoute;
  "/genre": typeof GenreIndexRoute;
  "/type": typeof TypeIndexRoute;
  "/director/$id/update": typeof DirectorIdUpdateRoute;
  "/filmProduction/$id/update": typeof FilmProductionIdUpdateRoute;
  "/genre/$id/update": typeof GenreIdUpdateRoute;
  "/media/$id/update": typeof MediaIdUpdateRoute;
  "/type/$id/update": typeof TypeIdUpdateRoute;
  "/director/$id": typeof DirectorIdIndexRoute;
  "/filmProduction/$id": typeof FilmProductionIdIndexRoute;
  "/genre/$id": typeof GenreIdIndexRoute;
  "/media/$id": typeof MediaIdIndexRoute;
  "/type/$id": typeof TypeIdIndexRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  "/": typeof IndexRoute;
  "/director/new": typeof DirectorNewRoute;
  "/filmProduction/new": typeof FilmProductionNewRoute;
  "/genre/new": typeof GenreNewRoute;
  "/media/new": typeof MediaNewRoute;
  "/type/new": typeof TypeNewRoute;
  "/director/": typeof DirectorIndexRoute;
  "/filmProduction/": typeof FilmProductionIndexRoute;
  "/genre/": typeof GenreIndexRoute;
  "/type/": typeof TypeIndexRoute;
  "/director/$id/update": typeof DirectorIdUpdateRoute;
  "/filmProduction/$id/update": typeof FilmProductionIdUpdateRoute;
  "/genre/$id/update": typeof GenreIdUpdateRoute;
  "/media/$id/update": typeof MediaIdUpdateRoute;
  "/type/$id/update": typeof TypeIdUpdateRoute;
  "/director/$id/": typeof DirectorIdIndexRoute;
  "/filmProduction/$id/": typeof FilmProductionIdIndexRoute;
  "/genre/$id/": typeof GenreIdIndexRoute;
  "/media/$id/": typeof MediaIdIndexRoute;
  "/type/$id/": typeof TypeIdIndexRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | "/"
    | "/director/new"
    | "/filmProduction/new"
    | "/genre/new"
    | "/media/new"
    | "/type/new"
    | "/director"
    | "/filmProduction"
    | "/genre"
    | "/type"
    | "/director/$id/update"
    | "/filmProduction/$id/update"
    | "/genre/$id/update"
    | "/media/$id/update"
    | "/type/$id/update"
    | "/director/$id"
    | "/filmProduction/$id"
    | "/genre/$id"
    | "/media/$id"
    | "/type/$id";
  fileRoutesByTo: FileRoutesByTo;
  to:
    | "/"
    | "/director/new"
    | "/filmProduction/new"
    | "/genre/new"
    | "/media/new"
    | "/type/new"
    | "/director"
    | "/filmProduction"
    | "/genre"
    | "/type"
    | "/director/$id/update"
    | "/filmProduction/$id/update"
    | "/genre/$id/update"
    | "/media/$id/update"
    | "/type/$id/update"
    | "/director/$id"
    | "/filmProduction/$id"
    | "/genre/$id"
    | "/media/$id"
    | "/type/$id";
  id:
    | "__root__"
    | "/"
    | "/director/new"
    | "/filmProduction/new"
    | "/genre/new"
    | "/media/new"
    | "/type/new"
    | "/director/"
    | "/filmProduction/"
    | "/genre/"
    | "/type/"
    | "/director/$id/update"
    | "/filmProduction/$id/update"
    | "/genre/$id/update"
    | "/media/$id/update"
    | "/type/$id/update"
    | "/director/$id/"
    | "/filmProduction/$id/"
    | "/genre/$id/"
    | "/media/$id/"
    | "/type/$id/";
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  DirectorNewRoute: typeof DirectorNewRoute;
  FilmProductionNewRoute: typeof FilmProductionNewRoute;
  GenreNewRoute: typeof GenreNewRoute;
  MediaNewRoute: typeof MediaNewRoute;
  TypeNewRoute: typeof TypeNewRoute;
  DirectorIndexRoute: typeof DirectorIndexRoute;
  FilmProductionIndexRoute: typeof FilmProductionIndexRoute;
  GenreIndexRoute: typeof GenreIndexRoute;
  TypeIndexRoute: typeof TypeIndexRoute;
  DirectorIdUpdateRoute: typeof DirectorIdUpdateRoute;
  FilmProductionIdUpdateRoute: typeof FilmProductionIdUpdateRoute;
  GenreIdUpdateRoute: typeof GenreIdUpdateRoute;
  MediaIdUpdateRoute: typeof MediaIdUpdateRoute;
  TypeIdUpdateRoute: typeof TypeIdUpdateRoute;
  DirectorIdIndexRoute: typeof DirectorIdIndexRoute;
  FilmProductionIdIndexRoute: typeof FilmProductionIdIndexRoute;
  GenreIdIndexRoute: typeof GenreIdIndexRoute;
  MediaIdIndexRoute: typeof MediaIdIndexRoute;
  TypeIdIndexRoute: typeof TypeIdIndexRoute;
}

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/type/": {
      id: "/type/";
      path: "/type";
      fullPath: "/type";
      preLoaderRoute: typeof TypeIndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/genre/": {
      id: "/genre/";
      path: "/genre";
      fullPath: "/genre";
      preLoaderRoute: typeof GenreIndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/filmProduction/": {
      id: "/filmProduction/";
      path: "/filmProduction";
      fullPath: "/filmProduction";
      preLoaderRoute: typeof FilmProductionIndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/director/": {
      id: "/director/";
      path: "/director";
      fullPath: "/director";
      preLoaderRoute: typeof DirectorIndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/type/new": {
      id: "/type/new";
      path: "/type/new";
      fullPath: "/type/new";
      preLoaderRoute: typeof TypeNewRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/media/new": {
      id: "/media/new";
      path: "/media/new";
      fullPath: "/media/new";
      preLoaderRoute: typeof MediaNewRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/genre/new": {
      id: "/genre/new";
      path: "/genre/new";
      fullPath: "/genre/new";
      preLoaderRoute: typeof GenreNewRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/filmProduction/new": {
      id: "/filmProduction/new";
      path: "/filmProduction/new";
      fullPath: "/filmProduction/new";
      preLoaderRoute: typeof FilmProductionNewRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/director/new": {
      id: "/director/new";
      path: "/director/new";
      fullPath: "/director/new";
      preLoaderRoute: typeof DirectorNewRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/type/$id/": {
      id: "/type/$id/";
      path: "/type/$id";
      fullPath: "/type/$id";
      preLoaderRoute: typeof TypeIdIndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/media/$id/": {
      id: "/media/$id/";
      path: "/media/$id";
      fullPath: "/media/$id";
      preLoaderRoute: typeof MediaIdIndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/genre/$id/": {
      id: "/genre/$id/";
      path: "/genre/$id";
      fullPath: "/genre/$id";
      preLoaderRoute: typeof GenreIdIndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/filmProduction/$id/": {
      id: "/filmProduction/$id/";
      path: "/filmProduction/$id";
      fullPath: "/filmProduction/$id";
      preLoaderRoute: typeof FilmProductionIdIndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/director/$id/": {
      id: "/director/$id/";
      path: "/director/$id";
      fullPath: "/director/$id";
      preLoaderRoute: typeof DirectorIdIndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/type/$id/update": {
      id: "/type/$id/update";
      path: "/type/$id/update";
      fullPath: "/type/$id/update";
      preLoaderRoute: typeof TypeIdUpdateRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/media/$id/update": {
      id: "/media/$id/update";
      path: "/media/$id/update";
      fullPath: "/media/$id/update";
      preLoaderRoute: typeof MediaIdUpdateRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/genre/$id/update": {
      id: "/genre/$id/update";
      path: "/genre/$id/update";
      fullPath: "/genre/$id/update";
      preLoaderRoute: typeof GenreIdUpdateRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/filmProduction/$id/update": {
      id: "/filmProduction/$id/update";
      path: "/filmProduction/$id/update";
      fullPath: "/filmProduction/$id/update";
      preLoaderRoute: typeof FilmProductionIdUpdateRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/director/$id/update": {
      id: "/director/$id/update";
      path: "/director/$id/update";
      fullPath: "/director/$id/update";
      preLoaderRoute: typeof DirectorIdUpdateRouteImport;
      parentRoute: typeof rootRouteImport;
    };
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DirectorNewRoute: DirectorNewRoute,
  FilmProductionNewRoute: FilmProductionNewRoute,
  GenreNewRoute: GenreNewRoute,
  MediaNewRoute: MediaNewRoute,
  TypeNewRoute: TypeNewRoute,
  DirectorIndexRoute: DirectorIndexRoute,
  FilmProductionIndexRoute: FilmProductionIndexRoute,
  GenreIndexRoute: GenreIndexRoute,
  TypeIndexRoute: TypeIndexRoute,
  DirectorIdUpdateRoute: DirectorIdUpdateRoute,
  FilmProductionIdUpdateRoute: FilmProductionIdUpdateRoute,
  GenreIdUpdateRoute: GenreIdUpdateRoute,
  MediaIdUpdateRoute: MediaIdUpdateRoute,
  TypeIdUpdateRoute: TypeIdUpdateRoute,
  DirectorIdIndexRoute: DirectorIdIndexRoute,
  FilmProductionIdIndexRoute: FilmProductionIdIndexRoute,
  GenreIdIndexRoute: GenreIdIndexRoute,
  MediaIdIndexRoute: MediaIdIndexRoute,
  TypeIdIndexRoute: TypeIdIndexRoute,
};
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();
